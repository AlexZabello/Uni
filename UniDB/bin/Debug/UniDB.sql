/*
Deployment script for UniDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "UniDB"
:setvar DefaultFilePrefix "UniDB"
:setvar DefaultDataPath "C:\Users\AlexeyZabello\AppData\Local\Microsoft\VisualStudio\SSDT\Uni"
:setvar DefaultLogPath "C:\Users\AlexeyZabello\AppData\Local\Microsoft\VisualStudio\SSDT\Uni"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 201f11dc-f9ea-4fcc-8c06-2cc6062de571 is skipped, element [dbo].[Test1].[Id] (SqlSimpleColumn) will not be renamed to IdTest1';


GO
PRINT N'Rename refactoring operation with key 8492ef5f-3de0-4729-beaf-306e04900b4c is skipped, element [dbo].[Test2].[Id] (SqlSimpleColumn) will not be renamed to IdTest2';


GO
PRINT N'Rename refactoring operation with key 370c57ad-764b-450f-8eab-f22f9893ec88 is skipped, element [dbo].[Test3].[Id] (SqlSimpleColumn) will not be renamed to IdTest3';


GO
PRINT N'Creating [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [GroupId]   INT          IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (20) NOT NULL,
    [SubjectId] INT          NOT NULL,
    [TeacherId] INT          NOT NULL,
    CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED ([GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[Student]...';


GO
CREATE TABLE [dbo].[Student] (
    [StudentId] INT          IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (50) NOT NULL,
    [LastName]  VARCHAR (50) NOT NULL,
    [SubjectId] INT          NOT NULL,
    [GroupId]   INT          NULL,
    CONSTRAINT [PK_Student] PRIMARY KEY CLUSTERED ([StudentId] ASC)
);


GO
PRINT N'Creating [dbo].[Subject]...';


GO
CREATE TABLE [dbo].[Subject] (
    [SubjectId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Subject] PRIMARY KEY CLUSTERED ([SubjectId] ASC)
);


GO
PRINT N'Creating [dbo].[Teacher]...';


GO
CREATE TABLE [dbo].[Teacher] (
    [TeacherId] INT          IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (50) NOT NULL,
    [LastName]  VARCHAR (50) NOT NULL,
    [SubjectId] INT          NOT NULL,
    [UserId]    INT          NOT NULL,
    CONSTRAINT [PK_Teacher] PRIMARY KEY CLUSTERED ([TeacherId] ASC)
);


GO
PRINT N'Creating [dbo].[Teacher].[IX_Teacher_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Teacher_UserId]
    ON [dbo].[Teacher]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Test1]...';


GO
CREATE TABLE [dbo].[Test1] (
    [IdTest1] INT IDENTITY (1, 1) NOT NULL,
    [IdTest2] INT NOT NULL,
    [IdTest3] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([IdTest1] ASC)
);


GO
PRINT N'Creating [dbo].[Test2]...';


GO
CREATE TABLE [dbo].[Test2] (
    [IdTest2] INT IDENTITY (1, 1) NOT NULL,
    [IdTest1] INT NOT NULL,
    [IdTest3] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([IdTest2] ASC)
);


GO
PRINT N'Creating [dbo].[Test3]...';


GO
CREATE TABLE [dbo].[Test3] (
    [IdTest3] INT IDENTITY (1, 1) NOT NULL,
    [IdTest1] INT NOT NULL,
    [IdTest2] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([IdTest3] ASC)
);


GO
PRINT N'Creating [dbo].[Test3].[IX_Test3_IdTest1]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Test3_IdTest1]
    ON [dbo].[Test3]([IdTest1] ASC);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]     INT          IDENTITY (1, 1) NOT NULL,
    [Login]      VARCHAR (20) NOT NULL,
    [UserRoleId] INT          NULL,
    [Password]   VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserRoleId] INT          IDENTITY (1, 1) NOT NULL,
    [Name]       VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_UserType] PRIMARY KEY CLUSTERED ([UserRoleId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Group_Subject]...';


GO
ALTER TABLE [dbo].[Group] WITH NOCHECK
    ADD CONSTRAINT [FK_Group_Subject] FOREIGN KEY ([SubjectId]) REFERENCES [dbo].[Subject] ([SubjectId]);


GO
PRINT N'Creating [dbo].[FK_Group_Teacher]...';


GO
ALTER TABLE [dbo].[Group] WITH NOCHECK
    ADD CONSTRAINT [FK_Group_Teacher] FOREIGN KEY ([TeacherId]) REFERENCES [dbo].[Teacher] ([TeacherId]);


GO
PRINT N'Creating [dbo].[FK_Student_Group]...';


GO
ALTER TABLE [dbo].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([GroupId]);


GO
PRINT N'Creating [dbo].[FK_Student_Subject]...';


GO
ALTER TABLE [dbo].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_Subject] FOREIGN KEY ([SubjectId]) REFERENCES [dbo].[Subject] ([SubjectId]);


GO
PRINT N'Creating [dbo].[FK_Teacher_Subject]...';


GO
ALTER TABLE [dbo].[Teacher] WITH NOCHECK
    ADD CONSTRAINT [FK_Teacher_Subject] FOREIGN KEY ([SubjectId]) REFERENCES [dbo].[Subject] ([SubjectId]);


GO
PRINT N'Creating [dbo].[FK_Teacher_User]...';


GO
ALTER TABLE [dbo].[Teacher] WITH NOCHECK
    ADD CONSTRAINT [FK_Teacher_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Test2_To_Test1]...';


GO
ALTER TABLE [dbo].[Test2] WITH NOCHECK
    ADD CONSTRAINT [FK_Test2_To_Test1] FOREIGN KEY ([IdTest1]) REFERENCES [dbo].[Test1] ([IdTest1]);


GO
PRINT N'Creating [dbo].[FK_Test3_To_Test1]...';


GO
ALTER TABLE [dbo].[Test3] WITH NOCHECK
    ADD CONSTRAINT [FK_Test3_To_Test1] FOREIGN KEY ([IdTest1]) REFERENCES [dbo].[Test1] ([IdTest1]);


GO
PRINT N'Creating [dbo].[FK_User_UserType]...';


GO
ALTER TABLE [dbo].[User] WITH NOCHECK
    ADD CONSTRAINT [FK_User_UserType] FOREIGN KEY ([UserRoleId]) REFERENCES [dbo].[UserRole] ([UserRoleId]);


GO
PRINT N'Creating [dbo].[vGropList]...';


GO
CREATE VIEW [dbo].[vGropList]
	AS 
SELECT g.GroupId
	  ,g.Name
	  ,g.SubjectId
	  ,sb.Name as SubjectName
	  ,g.TeacherId
	  ,t.FirstName as PFirstName
	  ,t.LastName as PLastName
FROM [Group] g
	JOIN [Subject] sb
	ON g.SubjectId = sb.SubjectId
	
	JOIN Teacher t
	ON g.TeacherId = t.TeacherId
GO
PRINT N'Creating [dbo].[vStudentList]...';


GO
CREATE VIEW [dbo].[vStudentList]
	AS
	 SELECT s.StudentId
	  ,s.FirstName
	  ,s.LastName
	  ,s.SubjectId
	  ,sb.Name as SubjectName
	  ,s.GroupId
	  ,g.Name as GroupName
	  ,t.FirstName as pFirstName
	  ,t.LastName as pLastName
FROM Student s
	JOIN [Subject] sb
	ON s.SubjectId = sb.SubjectId
	LEFT JOIN [Group] g
		JOIN Teacher t
		ON g.TeacherId = t.TeacherId
	ON s.GroupId = g.GroupId
GO
PRINT N'Altering [dbo].[StudentList]...';


GO
ALTER PROCEDURE [dbo].[StudentList]
AS
BEGIN
SELECT v.*
FROM vStudentList v
END
GO
PRINT N'Creating [dbo].[GroupDelete]...';


GO

CREATE PROCEDURE [dbo].[GroupDelete]
(
@GroupId int
)
AS
BEGIN

DELETE [Group]
WHERE GroupId = @GroupId

END
GO
PRINT N'Creating [dbo].[GroupGet]...';


GO

CREATE PROCEDURE [dbo].[GroupGet]
(
@GroupId int
)
AS
BEGIN
SELECT g.GroupId
	  ,g.Name
	  ,g.SubjectId
	  ,g.TeacherId
FROM [Group] g
WHERE g.GroupId = @GroupId
END
GO
PRINT N'Creating [dbo].[GroupList]...';


GO

CREATE PROCEDURE [dbo].[GroupList]
AS
BEGIN
SELECT *
FROM vGropList
END
GO
PRINT N'Creating [dbo].[GroupsForSubject]...';


GO
CREATE PROCEDURE [dbo].[GroupsForSubject]
	@SubjectId int
AS
SELECT v.*
FROM vGropList as v
WHERE v.SubjectId = @SubjectId
GO
PRINT N'Creating [dbo].[GroupUpdate]...';


GO

CREATE PROCEDURE [dbo].[GroupUpdate]
(
@GroupId int = null OUTPUT,
@Name varchar(50),
@SubjectId int,
@TeacherId int
)
AS
BEGIN

IF @GroupId IS NULL
BEGIN
	INSERT [Group](Name,SubjectId, TeacherId)
	VALUES (@Name, @SubjectId, @TeacherId)
	
	SET @GroupId = SCOPE_IDENTITY()
END
ELSE
BEGIN
	UPDATE [Group]
	SET Name = @Name,
		SubjectId = @SubjectId,
		TeacherId = @TeacherId
	WHERE
		GroupId = @GroupId
END

END
GO
PRINT N'Creating [dbo].[RegStudInGroup]...';


GO

CREATE PROCEDURE [dbo].[RegStudInGroup]
(
@StudentId int,
@GroupId int
)
AS
BEGIN
	INSERT StudentGroup(StudentId, GroupId)
	VALUES (@StudentId, @GroupId)
END
GO
PRINT N'Creating [dbo].[StudentDelete]...';


GO
CREATE PROCEDURE dbo.StudentDelete
(
@StudentId int
)
AS
BEGIN

DELETE Student
WHERE StudentId = @StudentId

END
GO
PRINT N'Creating [dbo].[StudentGet]...';


GO
CREATE PROCEDURE dbo.StudentGet
(
@StudentId int
)
AS
BEGIN
SELECT s.StudentId
	  ,s.FirstName
	  ,s.LastName
FROM Student s
WHERE s.StudentId = @StudentId
END
GO
PRINT N'Creating [dbo].[StudentSearch]...';


GO
CREATE PROCEDURE [dbo].[StudentSearch]
(
@FirstName varchar(20) = null,
@LastName varchar(20) = null,
@SubjectId int = null,
@GroupId int = null
)
AS
BEGIN
SELECT @FirstName = LTRIM(RTRIM(ISNULL(@FirstName,''))) + '%'
SELECT @LastName = LTRIM(RTRIM(ISNULL(@LastName,''))) + '%'


SELECT s.StudentId
	  ,s.FirstName
	  ,s.LastName
	  ,s.SubjectId
	  ,sb.Name as SubjectName
	  ,g.GroupId
	  ,g.Name as GroupName
	  ,t.FirstName as pFirstName
	  ,t.LastName as pLastName

FROM Student s
	JOIN [Subject] sb
	ON s.SubjectId = sb.SubjectId
	
	LEFT JOIN [Group] g
		JOIN Teacher t
		ON g.TeacherId = t.TeacherId
	ON s.GroupId = g.GroupId
WHERE (@FirstName IS NULL OR s.FirstName LIKE @FirstName) AND
	  (@LastName IS NULL OR s.LastName LIKE @LastName) AND
	  (@SubjectId IS NULL OR s.SubjectId = @SubjectId) AND
	  (@GroupId IS NULL OR g.GroupId = @GroupId) AND
	  1=1
END
GO
PRINT N'Creating [dbo].[StudentUpdate]...';


GO
CREATE PROCEDURE [dbo].[StudentUpdate]
(
@StudentId int = null OUTPUT,
@FirstName varchar(50),
@LastName varchar(50),
@SubjectId int
--@UserId int
)
AS
BEGIN

IF @StudentId is null
BEGIN
	INSERT Student(FirstName,LastName,SubjectId)
	VALUES (@FirstName, @LastName, @SubjectId)
	
	SET @StudentId = SCOPE_IDENTITY()
END
ELSE
BEGIN
	UPDATE Student
	SET FirstName = @FirstName,
		LastName = @LastName,
		SubjectId = @SubjectId
	WHERE
		StudentId = @StudentId
END

END
GO
PRINT N'Creating [dbo].[SubjectDelete]...';


GO
CREATE PROCEDURE [dbo].[SubjectDelete]
(
@SubjectId int
)
AS
BEGIN

DELETE Subject
WHERE SubjectId = @SubjectId

END
GO
PRINT N'Creating [dbo].[SubjectGet]...';


GO

CREATE PROCEDURE [dbo].[SubjectGet]
(
@SubjectId int
)
AS
BEGIN
SELECT s.SubjectId
	  ,s.Name
FROM Subject s
WHERE s.SubjectId = @SubjectId
END
GO
PRINT N'Creating [dbo].[SubjectList]...';


GO

CREATE PROCEDURE [dbo].[SubjectList]
AS
BEGIN
SELECT s.SubjectId
	  ,s.Name
FROM Subject s
END
GO
PRINT N'Creating [dbo].[SubjectUpdate]...';


GO
CREATE PROCEDURE [dbo].[SubjectUpdate]
(
@SubjectId int = null OUTPUT,
@Name varchar(20)
)
AS
BEGIN

IF @SubjectId IS NULL
BEGIN
	INSERT Subject(Name)
	VALUES (@Name)
	
	SET @SubjectId = SCOPE_IDENTITY()
END
ELSE
BEGIN
	UPDATE Subject
	SET Name = @Name
	WHERE
		SubjectId = @SubjectId
END

END
GO
PRINT N'Creating [dbo].[TeacherDelete]...';


GO

CREATE PROCEDURE [dbo].[TeacherDelete]
(
@TeacherId int
)
AS
BEGIN

DELETE Teacher
WHERE TeacherId = @TeacherId

END
GO
PRINT N'Creating [dbo].[TeacherGet]...';


GO

CREATE PROCEDURE [dbo].[TeacherGet]
(
@TeacherId int
)
AS
BEGIN
SELECT t.TeacherId
	  ,t.FirstName
	  ,t.LastName
	  ,t.SubjectId
	  ,t.UserId
FROM Teacher t
WHERE t.TeacherId = @TeacherId
END
GO
PRINT N'Creating [dbo].[TeacherGetByUser]...';


GO
CREATE PROCEDURE [dbo].[TeacherGetByUser]
(
@Login varchar(20)
)
AS
SELECT t.FirstName
	  ,t.LastName
	  ,t.SubjectId
	  ,t.TeacherId
	  ,t.UserId
FROM Teacher t
	JOIN [User] u
	ON t.UserId = u.UserId
WHERE u.Login = @Login
GO
PRINT N'Creating [dbo].[TeacherList]...';


GO
CREATE PROCEDURE [dbo].[TeacherList]
AS
BEGIN
SELECT t.TeacherId
	  ,t.FirstName
	  ,t.LastName
	  ,t.SubjectId
	  ,t.UserId
FROM Teacher t
END
GO
PRINT N'Creating [dbo].[TeacherUpdate]...';


GO

CREATE PROCEDURE [dbo].[TeacherUpdate]
(
@TeacherId int = null OUTPUT,
@FirstName varchar(50),
@LastName varchar(50),
@SubjectId int,
@UserId int
)
AS
BEGIN

IF @TeacherId IS NULL
BEGIN
	INSERT Teacher(FirstName,LastName,SubjectId,UserId)
	VALUES (@FirstName, @LastName,@SubjectId, @UserId)
	
	SET @TeacherId = SCOPE_IDENTITY()
END
ELSE
BEGIN
	UPDATE Teacher
	SET FirstName = @FirstName,
		LastName = @LastName,
		SubjectId = @SubjectId,
		UserId = @UserId
	WHERE
		TeacherId = @TeacherId
END

END
GO
PRINT N'Creating [dbo].[UnRegStudInGroup]...';


GO

CREATE PROCEDURE [dbo].[UnRegStudInGroup]
(
@StudentId int,
@GroupId int
)
AS
BEGIN
DELETE StudentGroup
	WHERE StudentId = @StudentId AND GroupId = @GroupId
END
GO
PRINT N'Creating [dbo].[UserCheck]...';


GO
CREATE PROCEDURE [dbo].[UserCheck]
(
@Login varchar(20),
@Password varchar(20),
@UserId int OUTPUT,
@UserRoleId int = null OUTPUT
)
AS

BEGIN
	SELECT @UserRoleId = u.UserRoleId
		  ,@UserId = u.UserId
	FROM [User] as u
	WHERE 
		CAST(u.Login as varbinary(20)) = CAST(@Login as varbinary(20)) 
		AND CAST(u.Password as varbinary(20)) = CAST(@Password as varbinary(20))
	
RETURN
END
GO
PRINT N'Creating [dbo].[UserGet]...';


GO
CREATE PROCEDURE [dbo].[UserGet]
(
@UserId int
)
AS
SELECT u.UserId
	  ,u.Login
	  ,u.UserRoleId
FROM [User] as u
WHERE u.UserId = @UserId
GO
PRINT N'Creating [dbo].[UserRoleGet]...';


GO

CREATE PROCEDURE [dbo].[UserRoleGet]
(
@Login varchar(20)
)
AS
SELECT ur.UserRoleId
	  ,ur.Name
FROM [UserRole] as ur
	JOIN [User] as u
	ON ur.UserRoleId = u.UserRoleId
WHERE u.Login = @Login
GO
PRINT N'Creating [dbo].[UserRoleList]...';


GO

CREATE PROCEDURE [dbo].[UserRoleList]
AS
SELECT ur.UserRoleId
	  ,ur.Name
FROM UserRole as ur
GO
PRINT N'Creating [dbo].[UsersList]...';


GO
CREATE PROCEDURE [dbo].[UsersList]
AS
SELECT u.UserId
	  ,u.Login
	  ,u.UserRoleId
	  ,ud.Name as UserRoleName
FROM [User] as u
	LEFT JOIN UserRole as ud
	ON u.UserRoleId = ud.UserRoleId
GO
PRINT N'Creating [dbo].[UserUpdate]...';


GO
CREATE PROCEDURE [dbo].[UserUpdate]
(
@UserId int = null OUTPUT,
@Login varchar(20),
@Password varchar(20) = '',
@UserRoleId int = null
)
AS

BEGIN
	IF @UserId is null
	BEGIN
		INSERT [User]([Login], [Password], UserRoleId)
		VALUES (@Login, @Password, @UserRoleId)
		
		SET @UserId = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE [User]
		SET 
			UserRoleId = @UserRoleId
		WHERE UserId = @UserId
	END
	
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '201f11dc-f9ea-4fcc-8c06-2cc6062de571')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('201f11dc-f9ea-4fcc-8c06-2cc6062de571')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8492ef5f-3de0-4729-beaf-306e04900b4c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8492ef5f-3de0-4729-beaf-306e04900b4c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '370c57ad-764b-450f-8eab-f22f9893ec88')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('370c57ad-764b-450f-8eab-f22f9893ec88')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Group] WITH CHECK CHECK CONSTRAINT [FK_Group_Subject];

ALTER TABLE [dbo].[Group] WITH CHECK CHECK CONSTRAINT [FK_Group_Teacher];

ALTER TABLE [dbo].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_Group];

ALTER TABLE [dbo].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_Subject];

ALTER TABLE [dbo].[Teacher] WITH CHECK CHECK CONSTRAINT [FK_Teacher_Subject];

ALTER TABLE [dbo].[Teacher] WITH CHECK CHECK CONSTRAINT [FK_Teacher_User];

ALTER TABLE [dbo].[Test2] WITH CHECK CHECK CONSTRAINT [FK_Test2_To_Test1];

ALTER TABLE [dbo].[Test3] WITH CHECK CHECK CONSTRAINT [FK_Test3_To_Test1];

ALTER TABLE [dbo].[User] WITH CHECK CHECK CONSTRAINT [FK_User_UserType];


GO
PRINT N'Update complete.';


GO
